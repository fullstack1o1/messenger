openapi: 3.0.0
info:
  title: Chat Application API
  description: API for chat functionality supporting user-to-user and user-to-group messaging.
  version: 1.1.0

servers:
  - url: https://api.chatapp.com/v1
    description: Main (production) server

paths:
  /me:
    get:
      summary: Get information about the currently authenticated user
      operationId: getCurrentUser
      responses:
        '200':
          description: Current user's information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /signup:
    post:
      summary: Register a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /groups/{groupId}/messages:
    get:
      summary: Get messages from a group
      operationId: getGroupMessagesNoContent
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content available

  /users:
    get:
      summary: Fetch all users
      operationId: getAllUsers
      responses:
        '200':
          description: Successful response with a list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Register a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Fetch a user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/me/groups:
    get:
      summary: Fetch all groups for the currently authenticated user
      operationId: getUserGroups
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'

    post:
      summary: Create a new group for the current user
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

  /users/me/groups/{groupId}:
    patch:
      summary: Update a group for the current user
      operationId: updateGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
      responses:
        '200':
          description: Group updated successfully

    delete:
      summary: Delete a group for the current user
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Group deleted successfully

  /users/me/groups/{groupId}/unread-messages-count:
    get:
      summary: Get unread messages count for a group
      operationId: getUnreadMessagesCountForGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Unread messages count for the group
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
                    example: 5

  /users/me/groups/{groupId}/messages:
    get:
      summary: Fetch messages in a group
      operationId: getGroupMessages
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Messages in the group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /users/me/messages/{targetUserId}/unread-messages-count:
    get:
      summary: Get unread message count from a specific user
      operationId: getUnreadMessagesCountFromUser
      parameters:
        - name: targetUserId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Unread messages count from the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
                    example: 2

  /users/me/messages/{targetUserId}:
    get:
      summary: Fetch messages between the current user and a target user
      operationId: getMessagesBetweenUserAndTarget
      parameters:
        - name: targetUserId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Messages between the two users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: user123
        name:
          type: string
          example: John Doe

    UserSignup:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        password:
          type: string
          example: "password123"

    Group:
      type: object
      properties:
        id:
          type: string
          example: group123
        name:
          type: string
          example: Developers

    GroupUpdate:
      type: object
      properties:
        name:
          type: string
          example: Updated Group Name

    Message:
      type: object
      properties:
        id:
          type: string
          example: msg123
        fromUserId:
          type: string
          example: user123
        toUserId:
          type: string
          example: user456
        groupId:
          type: string
          nullable: true
          example: group123
        message:
          type: string
          example: "Hello, how are you?"
        timestamp:
          type: string
          format: date-time
          example: '2024-10-08T12:00:00Z'
