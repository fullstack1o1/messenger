openapi: 3.0.3
info:
  title: Chat Application API
  description: API for a chat application with user-to-user and user-to-group messaging. Supports WebSocket events for real-time communication.
  version: 1.0.0

servers:
  - url: https://api.chatapp.com/v1
    description: Production server

paths:
  /me:
    get:
      summary: Get current authenticated user details
      operationId: getCurrentUser
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /signup:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /groups/{groupId}/messages:
    get:
      summary: Get messages in a specific group
      operationId: getGroupMessages
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Messages in the group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Register a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/me/groups:
    get:
      summary: Get groups for the current user
      operationId: getUserGroups
      responses:
        '200':
          description: List of groups for the current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'

    post:
      summary: Create a new group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

  /users/me/groups/{groupId}:
    patch:
      summary: Update a group
      operationId: updateGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Group updated successfully

    delete:
      summary: Delete a group
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Group deleted successfully

  /users/me/groups/{groupId}/unread-messages-count:
    get:
      summary: Get unread messages count for a specific group
      operationId: getUnreadMessagesCountForGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Unread message count for the group
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 3

  /users/me/messages/{targetUserId}/unread-messages-count:
    get:
      summary: Get unread messages count for messages from a specific user
      operationId: getUnreadMessagesCountFromUser
      parameters:
        - name: targetUserId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Unread message count from the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 5

  /users/me/messages/{targetUserId}:
    get:
      summary: Get messages between the current user and a target user
      operationId: getMessagesBetweenUsers
      parameters:
        - name: targetUserId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Messages between users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        username:
          type: string
          example: Alice
        email:
          type: string
          example: alice@example.com
        authorities:
          type: array
          items:
            type: string
          example: ["ROLE_USER"]

    UserSignup:
      type: object
      properties:
        username:
          type: string
          example: Alice
        email:
          type: string
          example: alice@example.com
        password:
          type: string
          example: "{noop}password"

    Group:
      type: object
      properties:
        groupId:
          type: integer
          example: 1
        groupName:
          type: string
          example: Developers
        createdBy:
          type: integer
          example: 1
        members:
          type: array
          items:
            $ref: '#/components/schemas/GroupMember'
    

    GroupMember:
      type: object
      properties:
        groupId:
          type: integer
          example: 1
        userId:
          type: string
          example: Alice
        joinedAt:
          type: string
          format: date-time
          example: '2024-10-08T12:00:00Z'
      required:
        - userId

    Message:
      type: object
      properties:
        messageId:
          type: integer
          example: 1
        senderId:
          type: integer
          example: 1
        receiverId:
          type: integer
          nullable: true
          example: 2
        groupId:
          type: integer
          nullable: true
          example: 1
        content:
          type: string
          example: "Hello, how are you?"
      required:
        - content
        - groupId
        - receiverId

  examples:
    WebSocketEvents:
      description: WebSocket events for message delivery and user connection status
      value:
        events:
          - MESSAGE:
              description: Sent when a message is delivered between two users
              payload:
                type: MESSAGE
                fromUserId: user123
                toUserId: user456
                message: Hello!
                timestamp: '2024-10-08T12:00:00Z'
          - GROUP_MESSAGE:
              description: Sent when a message is delivered in a group
              payload:
                type: GROUP_MESSAGE
                fromUserId: user123
                groupId: group123
                message: Hello, group!
                timestamp: '2024-10-08T12:05:00Z'
          - USER_CONNECT:
              description: Sent when a user connects to the WebSocket
              payload:
                type: USER_CONNECT
                userId: user123
                timestamp: '2024-10-08T12:10:00Z'
          - USER_DISCONNECT:
              description: Sent when a user disconnects from the WebSocket
              payload:
                type: USER_DISCONNECT
                userId: user123
                timestamp: '2024-10-08T12:15:00Z'
